; Reduce a list using foldl

; List to use [1,2,3,4]
list = .. 1 4

; Functions to apply on reduce
fn1 a b = + a b
fn2 a b = * a b                
fn3 a b = - a b                

; Helper function - Extract list value
listVal n @list = @# (- (@& @list) n) @list

; foldl definition
foldl i fn @list 1 = fn i (listVal 1 @list)
foldl i fn @list n = foldl (fn i (listVal n @list)) fn @list (- n 1)

; Reduce definition
; - reduce with initializer
reduce fn @list init = foldl init fn @list (@& @list)
; - reduce with no initializer
reduce fn @list = foldl (listVal (@& @list) @list) fn @list (- (@& @list) 1)

; Call reduce on list using fnx
; (((1 + 2) + 3) + 4)
reduce fn1 (list)

; (((1  * 2) * 3) * 4)
reduce fn2 (list)

; (((1 - 2) - 3) - 4)
reduce fn3 (list)

; reduce with initial value
; ((((0 - 1) - 2) - 3) - 4)
reduce fn3 (list) 0

